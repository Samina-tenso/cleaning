// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          String    @default("user")
  password      String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  sessions      Session[]
  accounts      Account[]
  rooms         Room[]

  @@map(name: "users")
}

model Room {
  id         String  @id @default(cuid())
  number     String
  clean      Boolean @default(false)
  assignedId String?
  assigned   User?   @relation(fields: [assignedId], references: [id])

  @@map(name: "rooms")
}

model Session {
  id           String   @id @default(cuid())
  expiresAt    DateTime
  sessionToken String   @unique
  createdAt    DateTime
  updatedAt    DateTime
  ipAddress    String?
  userAgent    String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id                String    @id
  identifier        String
  verificationToken String    @unique
  expiresAt         DateTime
  createdAt         DateTime?
  updatedAt         DateTime?

  @@map("verification")
}
